GR simulation

Starting again from scratch now that I've gone through the ADM chapter of "Gravitation" and the 3+1 decomposition chapter of "Numerical Relativity"

Conventions & Notations:

	indexes: (taken from "Numerical Relativity" p.26)

a-h, o-z:	4D -- most often txyz. not sure if t should be stored first (for math index notation consistency) or last (ugly casting between 3D and 4D rank-1 tensors) just yet.
i-n:		3D -- most often xyz.

	operators:

partial_u 	= partial derivative wrt coordinate u
diff_u 		= covariant derivative wrt coordinate u
D_u 		= projection derivative / covariant of spatial metric wrt coordinate u
			   = proj diff_v
proj 		= projection operator ("Numerical Relativity" eqn 2.31)
			   such that proj T^a_b = gamma^a_c gamma_b^d T^c_d

	variables:

alpha		= lapse (distance between timeslices a coordinate is transported over dt)
beta^a		= shift (distance within the 3D hypersurface a coordiate is transported over dt) 
				= (0, beta^i) 	(i.e. beta^t = 0), therefore beta^a beta_a = beta^k beta_k
g_ab 		= ADM representation of 4D metric tensor 
				= gamma_ab - n_a n_b
				= ( -alpha^2 + beta^k beta_k	,	beta_j)		<- where beta_j = gamma_ij beta^k
				  (			beta_i				,	gamma_ij)		\ which is equivalent to beta_j = gamma_aj beta^a since beta^t = 0 after all so we just neglect the timelike component of beta and gamma
g^ab		= contravariant/inverse ADM representation of 4D metric tensor
				= gamma^ab - n^a n^b
				= ( -1/alpha^2		,			beta^j/alpha^2			   )
				  (	beta^i/alpha^2	,	gamma^ij - beta^i beta^j / alpha^2 )
n_a			= covariant form of normal vector (i.e. normal one-form) to 3D hypersurface in 4D space
				= (-alpha, 0)
n^a			= contravariant form of normal vector to 3D hypersurface in 4D space
				= (1/alpha, -beta^i/alpha)
gamma^ab	= 4D projection operator / contravariant/inverse metric tensor of 3D spatial hypersurface
				= g^ab + n^a n^b
				= (	0	,		0 	 )
				  ( 0	,	gamma_ij )
gamma_ab 	= 4D projection operator / metric tensor of 3D spatial hypersurface
				= g_ab + n_a n_b
				= ( beta^k beta_k	, 	beta_j   )
				  ( 	beta_i		,	gamma_ij )

conn^ijk	= 3D hypersurface Christoffel symbols of the first kind
				 = 1/2 (partial_k gamma_ij + partial_j gamma_ik - partial_i gamma_jk)

conn^i_jk	= 3D hypersurface Christoffel symbols of the second kind (connection coefficients)
				 = gamma^il conn_ljk
				 = 1/2 gamma^il (partial_k gamma_lj + partial_j gamma_lk - partial_l gamma_jk)

R_ij		= 3D Ricci curvature tensor
				= 1/2 gamma^kl (partial_i partial_l gamma_kj + partial_k partial_j gamma_il - partial_i partial_j gamma_kl - partial_k partial_l gamma_ij) + gamma^kl (conn^m_il conn_mkj - conn^m_ij conn_mkl)







scratch paper:



is the covariant derivative of a symmetric tensor also symmetric?

sum upper-ranks as follows:
	diff_k x^i = partial_k x^i + conn^i_jk x^j

sum lower-ranks as follows:
	diff_k x_i = partial_k x_i - conn^j_ik x_j

is symmetry maintained?:
	t^ij == t^ji <=> diff_k t^ij == diff_k t^ji ?
	diff_k t^ij = partial_k t^ij + t^lj conn^i_lk + t^il conn^j_lk
	diff_k t^ji = partial_k t^ji + t^li conn^j_lk + t^jl conn^i_lk
				= partial_k t^ij + t^lj conn^i_lk + t^il conn^j_lk
yes if both are upper 
	t_ij == t_ji <=> diff_k t_ij == diff_k t_ji ?
	diff_k t_ij = partial_k t_ij - t_lj conn^l_ik - t_il conn^l_jk
	diff_k t_ji = partial_k t_ji - t_li conn^l_jk - t_jl conn^l_ik
				= partial_k t_ij - t_lj conn^l_ik - t_il conn^l_jk
yes if both are lower
	t^i_j == t^j_i <=> diff_k t^i_j == diff_k t^j_i ?
	diff_k t^i_j = partial_k t^i_j + t^l_j conn^i_lk - t^i_l conn^l_jk
	diff_k t^j_i = partial_k t^j_i + t^l_i conn^j_lk - t^j_l conn^l_ik
				 = partial_k t^i_j - t^l_j conn^l_ik + t^i_l conn^j_lk
here we get a sign issue.   if conn^l_ik = -conn^i_lk then we're good.

g^a_b = delta^a_b = constant, so (g^a_b),c = 0
	(g^ad g_db),c = 0
	g^ad_,c g_db + g^ad g_db,c = 0
	g^ad_,c g_db = -g^ad g_db,c		<= for g dg, switch the lowers and uppers to switch the signs

conn^l_ik = 1/2 g^lm (g_mi,k + g_mk,i - g_ik,m)
conn^i_lk = 1/2 g^im (g_ml,k + g_mk,l - g_lk,i)
		  = 1/2 (g^im g_ml,k + g^im g_mk,l - g^im g_lk,i)
		  = -1/2 (g_lm g^mi,k + g^im g_lk,i - g^im g_mk,l)

... I'm not buying it, nor do I see it recorded anywhere

